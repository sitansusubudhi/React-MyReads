{"version":3,"sources":["icons/logo.svg","icons/dual-ring.svg","utils/BooksAPI.js","Book.js","BookShelf.js","BookShelves.js","SearchBooks.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","Book","state","selectValue","handleSelectOptionChange","value","_this","setState","props","onChangeSelectOption","bookId","_this2","this","_ref","_this3","react_default","a","createElement","className","style","width","height","backgroundImage","imageLinks","smallThumbnail","onChange","event","target","disabled","title","authors","map","author","key","Component","BookShelf","shelfTitle","onChangeBookShelf","shelfBooks","filter","includes","src_Book","BookShelves","currentlyReading","wantToRead","read","bookChangeShelf","BooksAPI","_ref2","_ref3","_ref4","_this$state","src","logo","alt","src_BookShelf","react_router_dom","to","process","SEARCH_TERMS","SEARCH_TERMS_LOWER","term","toLowerCase","SearchBooks","searchTerm","displayBooks","displayLoadingLogo","searchBookByTitleOrAuthor","searchQuery","trim","length","console","log","type","placeholder","autoFocus","join","App","react_router","path","component","exact","React","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4PCClCC,EAAM,wCAIRC,EAAQC,aAAaD,MACpBA,IACHA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAElE,IAAMC,EAAU,CACdC,OAAU,mBACVC,cAAiBR,GAaNS,EAAS,SAACC,EAAMC,GAAP,OACpBC,MAAK,GAAAC,OAAId,EAAJ,WAAAc,OAAiBH,EAAKI,IAAM,CAC/BC,OAAQ,MACRT,QAAQU,OAAAC,EAAA,EAAAD,CAAA,GACHV,EADE,CAELY,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEV,YACtBW,KAAK,SAAAC,GAAG,OAAIA,EAAIC,UAERC,EAAS,SAACC,GAAD,OACpBd,MAAK,GAAAC,OAAId,EAAJ,WAAkB,CACrBgB,OAAQ,OACRT,QAAQU,OAAAC,EAAA,EAAAD,CAAA,GACHV,EADE,CAELY,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEK,YACtBJ,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAK,GAAI,OAAIA,EAAKC,SC6CRC,6MAzEXC,MAAQ,CACJC,YAAa,UAsBjBC,yBAA2B,SAACtB,EAAMuB,GAC9BC,EAAKC,SAAS,iBAAO,CACjBJ,YAAaE,KAGhBC,EAAKE,MAAMC,qBAAqB3B,EAAMuB,uFAvBvB,IDNJK,ECMIC,EAAAC,KACA1B,EAAS0B,KAAKJ,MAAtB1B,KAAQI,IDPJwB,ECQCxB,EDPnBF,MAAK,GAAAC,OAAId,EAAJ,WAAAc,OAAiByB,GAAU,CAAEhC,YAC/BgB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAK,GAAI,OAAIA,EAAKjB,QCMbY,KAAK,SAAAmB,GAAe,IAAZ9B,EAAY8B,EAAZ9B,MAIL4B,EAAKJ,SAAS,iBAAO,CAClBJ,YAAapB,wCAmBhB,IAAA+B,EAAAF,KACG9B,EAAS8B,KAAKJ,MAAd1B,KACAqB,EAAgBS,KAAKV,MAArBC,YAER,OACIY,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAIXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,gBAAe,OAAArC,OAASH,EAAKyC,WAAazC,EAAKyC,WAAWC,eAAiB,GAA5D,QAC7ET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAKXH,EAAAC,EAAAC,cAAA,UAAQZ,MAAOF,EAAasB,SAAU,SAACC,GAAD,OAAWZ,EAAKV,yBAAyBtB,EAAM4C,EAAMC,OAAOtB,SAC9FU,EAAAC,EAAAC,cAAA,UAAQZ,MAAM,OAAOuB,UAAQ,GAA7B,cACAb,EAAAC,EAAAC,cAAA,UAAQZ,MAAM,oBAAd,qBACAU,EAAAC,EAAAC,cAAA,UAAQZ,MAAM,cAAd,gBACAU,EAAAC,EAAAC,cAAA,UAAQZ,MAAM,QAAd,QACAU,EAAAC,EAAAC,cAAA,UAAQZ,MAAM,QAAd,WAIZU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcpC,EAAK+C,OAKjC/C,EAAKgD,SAAWhD,EAAKgD,QAAQC,IAAI,SAACC,GAAD,OAC9BjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAee,IAAKD,GAASA,cA3E7CE,aCuCJC,EApCG,SAAC3B,GAAU,IAEjBR,EAAgDQ,EAAhDR,MAAOjB,EAAyCyB,EAAzCzB,MAAOqD,EAAkC5B,EAAlC4B,WAAYC,EAAsB7B,EAAtB6B,kBAC5BC,EAAatC,EAAMuC,OAAO,SAACzD,GAAD,OAAWC,EAAMyD,SAAS1D,EAAKI,MAG/D,OACI6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBkB,GACjCrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAMToB,EAAWP,IAAI,SAACjD,GAAD,OACZiC,EAAAC,EAAAC,cAACwB,EAAD,CAAMR,IAAKnD,EAAKI,GAAIJ,KAAMA,EAAM2B,qBAAsB4B,2BCsF/DK,6MAjGXxC,MAAQ,CACJF,MAAO,GACP2C,iBAAkB,GAClBC,WAAY,GACZC,KAAM,MA8BVC,gBAAkB,SAAChE,EAAMC,GAErBgE,EAAgBjE,EAAMC,GACjBW,KAAK,SAAAmB,GAA4C,IAAzC8B,EAAyC9B,EAAzC8B,iBAAkBC,EAAuB/B,EAAvB+B,WAAYC,EAAWhC,EAAXgC,KAInCvC,EAAKC,SAAS,iBAAO,CACjBoC,mBACAC,aACAC,gGApCI,IAAAlC,EAAAC,KHDtB5B,MAAK,GAAAC,OAAId,EAAJ,UAAiB,CAAEO,YACrBgB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAK,GAAI,OAAIA,EAAKC,QGCdN,KAAK,SAACM,GAKH,IAAM2C,EAAmB3C,EAAMuC,OAAO,SAACzD,GAAD,MAAyB,qBAAfA,EAAKC,QAA8BgD,IAAI,SAAAiB,GAAA,OAAAA,EAAE9D,KACnF0D,EAAa5C,EAAMuC,OAAO,SAACzD,GAAD,MAAyB,eAAfA,EAAKC,QAAwBgD,IAAI,SAAAkB,GAAA,OAAAA,EAAE/D,KACvE2D,EAAO7C,EAAMuC,OAAO,SAACzD,GAAD,MAAyB,SAAfA,EAAKC,QAAkBgD,IAAI,SAAAmB,GAAA,OAAAA,EAAEhE,KAGjEyB,EAAKJ,SAAS,iBAAO,CACjBP,QACA2C,mBACAC,aACAC,6CAyBH,IAAAM,EAEiDvC,KAAKV,MAAnDF,EAFHmD,EAEGnD,MAAO2C,EAFVQ,EAEUR,iBAAkBC,EAF5BO,EAE4BP,WAAYC,EAFxCM,EAEwCN,KAE7C,OACI9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKmC,IAAKC,IAAMnC,UAAU,WAAWoC,IAAI,UAE7CvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,WAIIF,EAAAC,EAAAC,cAACsC,EAAD,CACInB,WAAW,oBACXpC,MAAOA,EACPjB,MAAO4D,EACPN,kBAAmBzB,KAAKkC,kBAE5B/B,EAAAC,EAAAC,cAACsC,EAAD,CACInB,WAAW,eACXpC,MAAOA,EACPjB,MAAO6D,EACPP,kBAAmBzB,KAAKkC,kBAE5B/B,EAAAC,EAAAC,cAACsC,EAAD,CACInB,WAAW,OACXpC,MAAOA,EACPjB,MAAO8D,EACPR,kBAAmBzB,KAAKkC,oBAIpC/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAIXH,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAMC,GAAIC,yBACN3C,EAAAC,EAAAC,cAAA,sCAhGEiB,8BCIpByB,EAAe,CACjB,UAAW,MAAO,0BAClB,YAAa,SAAU,WACvB,aAAc,SAAU,YACxB,QAAS,WAAY,QAAS,YAC9B,WAAY,WAAY,SAAU,OAClC,UAAW,UAAW,QAAS,SAC/B,cAAe,oBAAqB,QACpC,UAAW,QAAS,YAAa,aACjC,UAAW,OAAQ,UAAW,QAAS,UACvC,WAAY,SAAU,QAAS,SAAU,QACzC,SAAU,OAAQ,QAAS,UAAW,QACtC,OAAQ,SAAU,UAAW,QAC7B,mBAAoB,OAAQ,SAC5B,UAAW,QAAS,UAAW,YAC/B,WAAY,aAAc,cAC1B,SAAU,aAAc,cACxB,QAAS,QAAS,QAAS,WAC3B,UAAW,SAAU,kBACrB,cAAe,QAAS,WAAY,OACpC,QAAS,OAAQ,UAAW,SAC5B,WAAY,kBACZ,kBAAmB,OAMjBC,EAAqBD,EAAa5B,IAAI,SAAA8B,GAAI,OAAIA,EAAKC,gBAsI1CC,6MA9HX7D,MAAQ,CACJ8D,WAAY,GACZC,aAAc,GACdC,oBAAoB,KAOxBC,0BAA4B,SAACzC,GAAU,IAC3BrB,EAAUqB,EAAMC,OAAhBtB,MACF+D,EAAc/D,EAAMgE,OAEtBD,EAAYE,OAAS,EACjBV,EAAmBpB,SAAS4B,EAAYN,gBAExCxD,EAAKC,SAAS,iBAAO,CACjB2D,oBAAoB,KAIxBnB,EAAgBqB,GACX1E,KAAK,SAACM,GAEHM,EAAKC,SAAS,iBAAO,CACjB0D,aAAcjE,EACdkE,oBAAoB,OAGhCK,QAAQC,IAAI,uBAAyBJ,KAGrC9D,EAAKC,SAAS,iBAAO,CACjB0D,aAAc,MAElBM,QAAQC,IAAI,8BAAgCJ,KAIhD9D,EAAKC,SAAS,iBAAO,CACjB0D,aAAc,MAElBM,QAAQC,IAAI,8BAIhBlE,EAAKC,SAAS,iBAAO,CACjByD,WAAY3D,QASpBgC,kBAAoB,SAACvD,EAAMC,GACvBgE,EAAgBjE,EAAMC,4EAIjB,IAAA4B,EAAAC,KAAAuC,EAEoDvC,KAAKV,MAAtD8D,EAFHb,EAEGa,WAAYC,EAFfd,EAEec,aAAcC,EAF7Bf,EAE6Be,mBAElC,OACInD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAIXH,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAMtC,UAAU,eAAeuC,GAAIC,mBAAnC,SACA3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAMXH,EAAAC,EAAAC,cAAA,SACIwD,KAAK,OACLC,YAAY,4BACZC,WAAW,EACXtE,MAAO2D,EACPvC,SAAUb,KAAKuD,8BAG3BpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAIVgD,GACGnD,EAAAC,EAAAC,cAAA,OAAKmC,IAAKC,IAAMnC,UAAU,kBAAkBoC,IAAI,iBAQnDW,EAAaK,OAAS,GACnBvD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACT+C,EAAalC,IAAI,SAACjD,GACf,OAAQiC,EAAAC,EAAAC,cAACwB,EAAD,CAAMR,IAAKnD,EAAKI,GAAIJ,KAAMA,EAAM2B,qBAAsBE,EAAK0B,wBAS7E6B,GAA8C,IAAxBD,EAAaK,QACjCvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCAAf,oEAEIH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACVyC,EAAaiB,KAAK,iBA1HzB1C,qBClBX2C,mLAbX,OACE9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAKbH,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAMrB,wBAAoCsB,UAAWjB,IAC5DhD,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOG,OAAK,EAACF,KAAMrB,kBAA8BsB,UAAWtC,YAVlDwC,IAAMhD,iBCAxBiD,IAASC,OACLrE,EAAAC,EAAAC,cAACuC,EAAA,EAAD,KACIzC,EAAAC,EAAAC,cAACoE,EAAD,OACcC,SAASC,eAAe","file":"static/js/main.2581f788.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/dual-ring.6e620cf0.svg\";","\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, { Component } from 'react';\r\nimport * as BooksAPI from './utils/BooksAPI';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Book extends Component {\r\n    /**\r\n    * Adding propTypes for verifying props passed down to Book\r\n    */\r\n    static propTypes = {\r\n        book: PropTypes.object.isRequired,\r\n        onChangeSelectOption: PropTypes.func.isRequired\r\n    }\r\n    /**\r\n     * selectValue - The select dropdown choice value\r\n     */\r\n    state = {\r\n        selectValue: \"none\"\r\n    }\r\n\r\n     // Call get method from BooksAPI in componentDidMount lifecycle event to fetch data from backend server\r\n    componentDidMount() {\r\n        const { book: { id } } = this.props; // Destructuring to obtain id from book variable passed down as props\r\n        BooksAPI.get(id)\r\n         .then(({ shelf }) => {\r\n            // Promise resolves to return an object containing all details for the book with the given 'id'.\r\n            // We get the shelf value by destructuring.\r\n            // Set the state selectValue as per shelf variable.\r\n             this.setState(() => ({\r\n                selectValue: shelf\r\n             }));\r\n         });\r\n    }\r\n\r\n    /**\r\n     * @description Updates shelf for the given Book. Sets the select dropdown value.\r\n     * @param {object} book - book object which contains at minimum an 'id' attribute\r\n     * @param {string} shelf - Shelf contains values from either of 'currentlyReading', 'wantToRead', 'read', 'none'\r\n     */\r\n    handleSelectOptionChange = (book, value) => {\r\n        this.setState(() => ({\r\n            selectValue: value\r\n         }));\r\n         // The callback is getting called.\r\n         this.props.onChangeSelectOption(book, value);\r\n    };\r\n\r\n\r\n    render() {\r\n        const { book } = this.props; // Destructuring to obtain book variable passed down as props\r\n        const { selectValue } = this.state; // Destructuring to obtain state variable selectValue\r\n\r\n        return (\r\n            <li>\r\n            <div className=\"book\">\r\n                <div className=\"book-top\">\r\n                    {/**\r\n                     * Check if imageLinks exist for current book. If no link, then set image url blank.\r\n                     */}\r\n                    <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks ? book.imageLinks.smallThumbnail : ''})` }}></div>\r\n                    <div className=\"book-shelf-changer\">\r\n                        {/**\r\n                         * Set value of the select dropdown field from selectValue of state.\r\n                         * Call handleSelectOptionChange when input field changes.\r\n                         */}\r\n                        <select value={selectValue} onChange={(event) => this.handleSelectOptionChange(book, event.target.value)}>\r\n                            <option value=\"move\" disabled>Move to...</option>\r\n                            <option value=\"currentlyReading\">Currently Reading</option>\r\n                            <option value=\"wantToRead\">Want to Read</option>\r\n                            <option value=\"read\">Read</option>   \r\n                            <option value=\"none\">None</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"book-title\">{book.title}</div>\r\n                {/**\r\n                 * Check if there are authors for current book.\r\n                 * Use map to loop over each author and display their names.\r\n                 */}\r\n                {book.authors && book.authors.map((author) => (\r\n                    <div className=\"book-authors\" key={author}>{author}</div>\r\n                ))}\r\n            </div>\r\n        </li>\r\n        );\r\n    }\r\n};\r\n\r\n\r\nexport default Book;","import React from 'react';\r\nimport Book from './Book';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * We can make this a Stateless Functional Component because this element doesn't need to hold its own state.\r\n */\r\nconst BookShelf = (props) => {\r\n    \r\n    const { books, shelf, shelfTitle, onChangeBookShelf } = props; // Destructuring to obtain all variables passed as props\r\n    const shelfBooks = books.filter((book) => (shelf.includes(book.id))); // get all books for current shelf\r\n    \r\n\r\n    return (\r\n        <div className=\"bookshelf\">\r\n            <h2 className=\"bookshelf-title\">{shelfTitle}</h2>\r\n            <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                    {/**\r\n                     * shelfBooks contains array of books for current shelf\r\n                     * Hence we map over the array and \r\n                     * render Book component for every book present in shelfBooks.\r\n                     */}\r\n                    {shelfBooks.map((book) => (\r\n                        <Book key={book.id} book={book} onChangeSelectOption={onChangeBookShelf} />\r\n                    ))}\r\n                </ol>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n/**\r\n * Adding propTypes for verifying props passed down to BookShelf\r\n */\r\nBookShelf.propTypes = {\r\n    books: PropTypes.array.isRequired,\r\n    shelf: PropTypes.array.isRequired,\r\n    shelfTitle: PropTypes.string.isRequired,\r\n    onChangeBookShelf: PropTypes.func.isRequired\r\n}\r\n\r\nexport default BookShelf;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport BookShelf from './BookShelf';\r\nimport * as BooksAPI from './utils/BooksAPI';\r\nimport logo from './icons/logo.svg';\r\n\r\nclass BookShelves extends Component {\r\n    /**\r\n     * books - Array storing book objects which includes books in shelves 'Currently Reading','Want to Read','Read'\r\n     * currentlyReading - Array storing bookIDs of all books in shelf 'Currently Reading' \r\n     * wantToRead - Array storing bookIDs of all books in shelf 'Want to Read' \r\n     * read - Array storing bookIDs of all books in shelf 'Read'\r\n     */\r\n    state = {\r\n        books: [],\r\n        currentlyReading: [],\r\n        wantToRead: [],\r\n        read: []\r\n    }\r\n\r\n    // Call getAll method from BooksAPI in componentDidMount lifecycle event to fetch data from backend server\r\n    componentDidMount() {\r\n        BooksAPI.getAll()\r\n        .then((books) => {\r\n\r\n            /**\r\n             * Filter records from response obtained and set them to arrays of bookIDs for the different shelves\r\n             */\r\n            const currentlyReading = books.filter((book) => book.shelf === 'currentlyReading').map(({id}) => (id)); \r\n            const wantToRead = books.filter((book) => book.shelf === 'wantToRead').map(({id}) => (id));;\r\n            const read = books.filter((book) => book.shelf === 'read').map(({id}) => (id));;\r\n\r\n            // Update state as per values obtained after Promise resolves successfully\r\n            this.setState(() => ({\r\n                books,\r\n                currentlyReading,\r\n                wantToRead,\r\n                read\r\n            }));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Updates shelf for the given Book. Pass as a callback function to BookShelf component. Parse the response obtained to set state for the different Book shelves.\r\n     * @param {object} book - book object which contains at minimum an 'id' attribute\r\n     * @param {string} shelf - Shelf contains values from either of 'currentlyReading', 'wantToRead', 'read', 'none'\r\n     */\r\n    bookChangeShelf = (book, shelf) => {\r\n        // Call update method from BooksAPI \r\n        BooksAPI.update(book, shelf)\r\n            .then(({ currentlyReading, wantToRead, read }) => {\r\n                // Promise resolves to return an object containing arrays for the bookshelves 'currentlyReading', 'wantToRead' and 'read'.\r\n                // The array elements contain only the bookIDs. \r\n                // Set the state of the shelves based on response obtained.\r\n                this.setState(() => ({\r\n                    currentlyReading,\r\n                    wantToRead,\r\n                    read\r\n                }));\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { books, currentlyReading, wantToRead, read } = this.state; // Destructuring to obtain all state variables\r\n\r\n        return (\r\n            <div className=\"list-books\">\r\n                <div className=\"list-books-title\">\r\n                    <h1>MyReads</h1>\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                </div>\r\n                <div className=\"list-books-content\">\r\n                    <div>\r\n                        {/**\r\n                         * Display all the book shelves\r\n                         */}\r\n                        <BookShelf \r\n                            shelfTitle=\"Currently Reading\" \r\n                            books={books}\r\n                            shelf={currentlyReading}\r\n                            onChangeBookShelf={this.bookChangeShelf}\r\n                        />\r\n                        <BookShelf \r\n                            shelfTitle=\"Want to Read\"\r\n                            books={books}\r\n                            shelf={wantToRead}\r\n                            onChangeBookShelf={this.bookChangeShelf}\r\n                        />\r\n                        <BookShelf \r\n                            shelfTitle=\"Read\"\r\n                            books={books}\r\n                            shelf={read}\r\n                            onChangeBookShelf={this.bookChangeShelf}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"open-search\">\r\n                    {/**\r\n                     * Add link to navigate to search page.\r\n                     */}\r\n                    <Link to={process.env.PUBLIC_URL + \"/search\"}>\r\n                        <button>Add a book</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default BookShelves;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as BooksAPI from './utils/BooksAPI';\r\nimport Book from './Book';\r\nimport logo from './icons/dual-ring.svg';\r\n\r\n/**\r\n * Search Terms using which the BooksAPI.search works.\r\n * These include some Book titles as well as authors.\r\n */ \r\nconst SEARCH_TERMS = [\r\n    'Android', 'Art', 'Artificial Intelligence', \r\n    'Astronomy', 'Austen', 'Baseball', \r\n    'Basketball', 'Bhagat', 'Biography', \r\n    'Brief', 'Business', 'Camus', 'Cervantes', \r\n    'Christie', 'Classics', 'Comics', 'Cook', \r\n    'Cricket', 'Cycling', 'Desai', 'Design', \r\n    'Development', 'Digital Marketing', 'Drama', \r\n    'Drawing', 'Dumas', 'Education', 'Everything', \r\n    'Fantasy', 'Film', 'Finance', 'First', 'Fitness',\r\n    'Football', 'Future', 'Games', 'Gandhi', 'Homer', \r\n    'Horror', 'Hugo', 'Ibsen', 'Journey', 'Kafka', \r\n    'King', 'Lahiri', 'Larsson', 'Learn', \r\n    'Literary Fiction', 'Make', 'Manage', \r\n    'Marquez', 'Money', 'Mystery', 'Negotiate', \r\n    'Painting', 'Philosophy', 'Photography', \r\n    'Poetry', 'Production', 'Programming', \r\n    'React', 'Redux', 'River', 'Robotics', \r\n    'Rowling', 'Satire', 'Science Fiction', \r\n    'Shakespeare', 'Singh', 'Swimming', 'Tale', \r\n    'Thrun', 'Time', 'Tolstoy', 'Travel', \r\n    'Ultimate', 'Virtual Reality', \r\n    'Web Development', 'iOS'\r\n];\r\n\r\n/**\r\n * Converting the all the search terms to lower case for ease of search.\r\n */\r\nconst SEARCH_TERMS_LOWER = SEARCH_TERMS.map(term => term.toLowerCase());\r\n\r\nclass SearchBooks extends Component {\r\n    /**\r\n     * searchTerm - The search input query which is used to search Books. Changes based on change of input\r\n     * displayBooks - Array storing all the books returned from BooksAPI.search\r\n     * displayLoadingLogo - Used to display logo when the searchTerm matches one of the terms in SEARCH_TERMS \r\n     */\r\n    state = {\r\n        searchTerm: '',\r\n        displayBooks: [],\r\n        displayLoadingLogo: false\r\n    }\r\n\r\n    /**\r\n     * @description Searches Books either by Title or Author by setting state based on input query.\r\n     * @param {object} event - event object generated by onChange of input query\r\n     */\r\n    searchBookByTitleOrAuthor = (event) => {\r\n        const { value } = event.target; // Destructuring to retrieve value of input query\r\n        const searchQuery = value.trim(); // Remove all trailing and leading whitespaces\r\n\r\n        if (searchQuery.length > 0) {\r\n            if (SEARCH_TERMS_LOWER.includes(searchQuery.toLowerCase())) {\r\n                // Display Loading logo only when searchQuery matches one of the Search Terms\r\n                this.setState(() => ({\r\n                    displayLoadingLogo: true\r\n                }));\r\n\r\n                // Call search method from BooksAPI\r\n                BooksAPI.search(searchQuery)\r\n                    .then((books) => {\r\n                        // Hide Loading logo when the Promise resolves and relevant books are obtained from the search\r\n                        this.setState(() => ({\r\n                            displayBooks: books,\r\n                            displayLoadingLogo: false\r\n                        }));\r\n                    });\r\n                console.log(\"Search Terms match. \" + searchQuery);\r\n            } else {\r\n                // Since searchQuery does not match any term from SEARCH_TERMS_LOWER, no need to call BooksAPI.search\r\n                this.setState(() => ({\r\n                    displayBooks: []\r\n                }))\r\n                console.log(\"Search Terms do not match. \" + searchQuery);\r\n            }\r\n        } else {\r\n            // If searchQuery is empty, do not call search method of BooksAPI. No books are displayed.\r\n            this.setState(() => ({\r\n                displayBooks: []\r\n            }));\r\n            console.log(\"Search Query length is 0.\");\r\n        }\r\n\r\n        // Update the state with value obtained from 'event' object generated by 'onChange' in 'input' type tag\r\n        this.setState(() => ({\r\n            searchTerm: value\r\n        }));\r\n    }\r\n\r\n     /**\r\n     * @description Updates shelf for the given Book. Pass as a callback function to Book component.\r\n     * @param {object} book - book object which contains at minimum an 'id' attribute\r\n     * @param {string} shelf - Shelf contains values from either of 'currentlyReading', 'wantToRead', 'read', 'none'\r\n     */\r\n    onChangeBookShelf = (book, shelf) => {\r\n        BooksAPI.update(book, shelf);\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        const { searchTerm, displayBooks, displayLoadingLogo } = this.state; // Destructuring to obtain all state variables\r\n\r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    {/**\r\n                     * Add link to navigate back to main page.\r\n                     */}\r\n                    <Link className=\"close-search\" to={process.env.PUBLIC_URL + \"/\"}>Close</Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        {/**\r\n                         * Set autoFocus attribute so that user does not have to reach for the input field to search.\r\n                         * Set value of the input field from searchTerm of state.\r\n                         * Call searchBookByTitleOrAuthor when input field changes.\r\n                         */}\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search by title or author\"\r\n                            autoFocus={true}\r\n                            value={searchTerm}\r\n                            onChange={this.searchBookByTitleOrAuthor} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    {/**\r\n                     * Display loading logo only when displayLoadingLogo in state is set to true\r\n                     */}\r\n                    {displayLoadingLogo && (\r\n                        <img src={logo} className=\"App-logo center\" alt=\"loading logo\"/>\r\n                    )}\r\n\r\n                    {/**\r\n                     * displayBooks contains array of books returned after BooksAPI.search\r\n                     * Hence we map over the array and \r\n                     * render Book component for every book present in displayBooks.\r\n                     */}\r\n                    {displayBooks.length > 0 && (\r\n                        <ol className=\"books-grid\">\r\n                            {displayBooks.map((book) => {\r\n                                return (<Book key={book.id} book={book} onChangeSelectOption={this.onChangeBookShelf} />)\r\n                            }\r\n                            )}\r\n                        </ol>\r\n                    )}\r\n\r\n                    {/**\r\n                     * Display search instruction when there are no books to display and loading logo is hidden.\r\n                     */}\r\n                    {!displayLoadingLogo && displayBooks.length === 0 && (\r\n                        <div className=\"place-holder-search-instruction\">\r\n                            Kindly use any one of the below search terms to search for books. \r\n                            <div className=\"place-holder-search\">\r\n                                {SEARCH_TERMS.join(', ')}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SearchBooks;","import React from 'react';\r\nimport './App.css';\r\nimport BookShelves from './BookShelves';\r\nimport SearchBooks from './SearchBooks';\r\nimport { Route } from 'react-router-dom';\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        {/**\r\n         * Since, we do not need to pass props to the child components,\r\n         * we can let react router to render the component based on the URL path.\r\n         */} \r\n        <Route path={process.env.PUBLIC_URL + \"/search\"} component={SearchBooks} />\r\n        <Route exact path={process.env.PUBLIC_URL + \"/\"} component={BookShelves} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>, document.getElementById('root'))\r\n"],"sourceRoot":""}