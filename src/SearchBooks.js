import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import * as BooksAPI from './utils/BooksAPI';
import Book from './Book';
import logo from './icons/dual-ring.svg';

/**
 * Search Terms using which the BooksAPI.search works.
 * These include some Book titles as well as authors.
 */ 
const SEARCH_TERMS = [
    'Android', 'Art', 'Artificial Intelligence', 
    'Astronomy', 'Austen', 'Baseball', 
    'Basketball', 'Bhagat', 'Biography', 
    'Brief', 'Business', 'Camus', 'Cervantes', 
    'Christie', 'Classics', 'Comics', 'Cook', 
    'Cricket', 'Cycling', 'Desai', 'Design', 
    'Development', 'Digital Marketing', 'Drama', 
    'Drawing', 'Dumas', 'Education', 'Everything', 
    'Fantasy', 'Film', 'Finance', 'First', 'Fitness',
    'Football', 'Future', 'Games', 'Gandhi', 'Homer', 
    'Horror', 'Hugo', 'Ibsen', 'Journey', 'Kafka', 
    'King', 'Lahiri', 'Larsson', 'Learn', 
    'Literary Fiction', 'Make', 'Manage', 
    'Marquez', 'Money', 'Mystery', 'Negotiate', 
    'Painting', 'Philosophy', 'Photography', 
    'Poetry', 'Production', 'Programming', 
    'React', 'Redux', 'River', 'Robotics', 
    'Rowling', 'Satire', 'Science Fiction', 
    'Shakespeare', 'Singh', 'Swimming', 'Tale', 
    'Thrun', 'Time', 'Tolstoy', 'Travel', 
    'Ultimate', 'Virtual Reality', 
    'Web Development', 'iOS'
];

/**
 * Converting the all the search terms to lower case for ease of search.
 */
const SEARCH_TERMS_LOWER = SEARCH_TERMS.map(term => term.toLowerCase());

class SearchBooks extends Component {
    /**
     * searchTerm - The search input query which is used to search Books. Changes based on change of input
     * displayBooks - Array storing all the books returned from BooksAPI.search
     * displayLoadingLogo - Used to display logo when the searchTerm matches one of the terms in SEARCH_TERMS 
     */
    state = {
        searchTerm: '',
        displayBooks: [],
        displayLoadingLogo: false
    }

    /**
     * @description Searches Books either by Title or Author by setting state based on input query.
     * @param {object} event - event object generated by onChange of input query
     */
    searchBookByTitleOrAuthor = (event) => {
        const { value } = event.target; // Destructuring to retrieve value of input query
        const searchQuery = value.trim(); // Remove all trailing and leading whitespaces

        if (searchQuery.length > 0) {
            if (SEARCH_TERMS_LOWER.includes(searchQuery.toLowerCase())) {
                // Display Loading logo only when searchQuery matches one of the Search Terms
                this.setState(() => ({
                    displayLoadingLogo: true
                }));

                // Call search method from BooksAPI
                BooksAPI.search(searchQuery)
                    .then((books) => {
                        // Hide Loading logo when the Promise resolves and relevant books are obtained from the search
                        this.setState(() => ({
                            displayBooks: books,
                            displayLoadingLogo: false
                        }));
                    });
                console.log("Search Terms match. " + searchQuery);
            } else {
                // Since searchQuery does not match any term from SEARCH_TERMS_LOWER, no need to call BooksAPI.search
                this.setState(() => ({
                    displayBooks: []
                }))
                console.log("Search Terms do not match. " + searchQuery);
            }
        } else {
            // If searchQuery is empty, do not call search method of BooksAPI. No books are displayed.
            this.setState(() => ({
                displayBooks: []
            }));
            console.log("Search Query length is 0.");
        }

        // Update the state with value obtained from 'event' object generated by 'onChange' in 'input' type tag
        this.setState(() => ({
            searchTerm: value
        }));
    }

     /**
     * @description Updates shelf for the given Book. Pass as a callback function to Book component.
     * @param {object} book - book object which contains at minimum an 'id' attribute
     * @param {string} shelf - Shelf contains values from either of 'currentlyReading', 'wantToRead', 'read', 'none'
     */
    onChangeBookShelf = (book, shelf) => {
        BooksAPI.update(book, shelf);
    }


    render() {
        
        const { searchTerm, displayBooks, displayLoadingLogo } = this.state; // Destructuring to obtain all state variables

        return (
            <div className="search-books">
                <div className="search-books-bar">
                    {/**
                     * Add link to navigate back to main page.
                     */}
                    <Link className="close-search" to={process.env.PUBLIC_URL + "/"}>Close</Link>
                    <div className="search-books-input-wrapper">
                        {/**
                         * Set autoFocus attribute so that user does not have to reach for the input field to search.
                         * Set value of the input field from searchTerm of state.
                         * Call searchBookByTitleOrAuthor when input field changes.
                         */}
                        <input
                            type="text"
                            placeholder="Search by title or author"
                            autoFocus={true}
                            value={searchTerm}
                            onChange={this.searchBookByTitleOrAuthor} />
                    </div>
                </div>
                <div className="search-books-results">
                    {/**
                     * Display loading logo only when displayLoadingLogo in state is set to true
                     */}
                    {displayLoadingLogo && (
                        <img src={logo} className="App-logo center" alt="loading logo"/>
                    )}

                    {/**
                     * displayBooks contains array of books returned after BooksAPI.search
                     * Hence we map over the array and 
                     * render Book component for every book present in displayBooks.
                     */}
                    {displayBooks.length > 0 && (
                        <ol className="books-grid">
                            {displayBooks.map((book) => {
                                return (<Book key={book.id} book={book} onChangeSelectOption={this.onChangeBookShelf} />)
                            }
                            )}
                        </ol>
                    )}

                    {/**
                     * Display search instruction when there are no books to display and loading logo is hidden.
                     */}
                    {!displayLoadingLogo && displayBooks.length === 0 && (
                        <div className="place-holder-search-instruction">
                            Kindly use any one of the below search terms to search for books. 
                            <div className="place-holder-search">
                                {SEARCH_TERMS.join(', ')}
                            </div>
                        </div>
                    )}
                </div>
            </div>
        );
    }
};

export default SearchBooks;